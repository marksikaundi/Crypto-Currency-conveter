{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Emmanuel Sikaundi\\\\Desktop\\\\projects\\\\metaverse\\\\crypto-dashboard-react\\\\src\\\\components\\\\CurrencyConverter.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport ExchangeRate from './ExchangeRate';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CurrencyConverter = () => {\n  _s();\n\n  const currencies = ['BTC', 'ETH', 'USD', 'XRP', 'LTC', 'ADA'];\n  const [chosenPrimaryCurrency, setChosenPrimaryCurrency] = useState('BTC');\n  const [chosenSecondaryCurrency, setChosenSecondaryCurrency] = useState('BTC');\n  const [amount, setAmount] = useState(1);\n  const [exchangedData, setExchangedData] = useState({\n    primaryCurrency: 'BTC',\n    secondaryCurrency: 'BTC',\n    exchangeRate: 0\n  });\n  const [result, setResult] = useState(0);\n  console.log(exchangedData);\n\n  const convert = () => {\n    // should say flex not dlex, comment this out for now\n    const options = {\n      method: 'GET',\n      url: 'http://localhost:8000/convert',\n      params: {\n        from_currency: chosenPrimaryCurrency,\n        function: 'CURRENCY_EXCHANGE_RATE',\n        to_currency: chosenSecondaryCurrency\n      }\n    };\n    axios.request(options).then(response => {\n      console.log(response.data);\n      setResult(response.data * amount);\n      setExchangedData({\n        primaryCurrency: chosenPrimaryCurrency,\n        secondaryCurrency: chosenSecondaryCurrency,\n        exchangeRate: response.data\n      });\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"currency-converter\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Currency Converter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Primary Currency:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"number\",\n                name: \"currency-amount-1\",\n                value: amount,\n                onChange: e => setAmount(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 54,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: chosenPrimaryCurrency,\n                name: \"currency-option-1\",\n                className: \"currency-options\",\n                onChange: e => setChosenPrimaryCurrency(e.target.value),\n                children: currencies.map((currency, _index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: currency\n                }, _index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 68,\n                  columnNumber: 72\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: \"Secondary Currency:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"input\", {\n                name: \"currency-amount-2\",\n                value: result,\n                disabled: true\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 75,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"select\", {\n                value: chosenSecondaryCurrency,\n                name: \"currency-option-2\",\n                className: \"currency-options\",\n                onChange: e => setChosenSecondaryCurrency(e.target.value),\n                children: currencies.map((currency, _index) => /*#__PURE__*/_jsxDEV(\"option\", {\n                  children: currency\n                }, _index, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 88,\n                  columnNumber: 72\n                }, this))\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"convert-button\",\n        onClick: convert,\n        children: \"Convert\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ExchangeRate, {\n      exchangedData: exchangedData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CurrencyConverter, \"0rKR3EXL57LHEAz5x/eB2cmJtTc=\");\n\n_c = CurrencyConverter;\nexport default CurrencyConverter;\n\nvar _c;\n\n$RefreshReg$(_c, \"CurrencyConverter\");","map":{"version":3,"sources":["C:/Users/Emmanuel Sikaundi/Desktop/projects/metaverse/crypto-dashboard-react/src/components/CurrencyConverter.js"],"names":["useState","ExchangeRate","axios","CurrencyConverter","currencies","chosenPrimaryCurrency","setChosenPrimaryCurrency","chosenSecondaryCurrency","setChosenSecondaryCurrency","amount","setAmount","exchangedData","setExchangedData","primaryCurrency","secondaryCurrency","exchangeRate","result","setResult","console","log","convert","options","method","url","params","from_currency","function","to_currency","request","then","response","data","catch","error","e","target","value","map","currency","_index"],"mappings":"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","sourcesContent":["import { useState } from 'react'\r\nimport ExchangeRate from './ExchangeRate'\r\nimport axios from 'axios'\r\n\r\nconst CurrencyConverter = () => {\r\n    const currencies = ['BTC', 'ETH', 'USD', 'XRP', 'LTC', 'ADA' ]\r\n    const [chosenPrimaryCurrency, setChosenPrimaryCurrency] = useState('BTC')\r\n    const [chosenSecondaryCurrency, setChosenSecondaryCurrency] = useState('BTC')\r\n    const [amount, setAmount] = useState(1)\r\n    const [exchangedData, setExchangedData] = useState({\r\n        primaryCurrency: 'BTC',\r\n        secondaryCurrency: 'BTC',\r\n        exchangeRate: 0\r\n    })\r\n    const [result, setResult] = useState(0)\r\n\r\n    console.log(exchangedData)\r\n\r\n    const convert = () => { // should say flex not dlex, comment this out for now\r\n\r\n\r\n\r\n        const options = {\r\n            method: 'GET',\r\n            url: 'http://localhost:8000/convert',\r\n            params: {from_currency: chosenPrimaryCurrency, function: 'CURRENCY_EXCHANGE_RATE', to_currency: chosenSecondaryCurrency}\r\n        }\r\n\r\n        axios.request(options).then((response) => {\r\n            console.log(response.data)\r\n            setResult(response.data * amount)\r\n\r\n            setExchangedData({\r\n                primaryCurrency: chosenPrimaryCurrency,\r\n                secondaryCurrency: chosenSecondaryCurrency,\r\n                exchangeRate: response.data\r\n            })\r\n        }).catch((error) => {\r\n            console.error(error)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"currency-converter\">\r\n            <h2>Currency Converter</h2>\r\n\r\n            <div className=\"input-box\">\r\n\r\n                <table>\r\n                    <tbody>\r\n                    <tr>\r\n                        <td>Primary Currency:</td>\r\n                        <td>\r\n                            <input\r\n                                type=\"number\"\r\n                                name=\"currency-amount-1\"\r\n                                value={amount}\r\n                                onChange={(e) => setAmount(e.target.value)}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <select\r\n                                value={chosenPrimaryCurrency}\r\n                                name=\"currency-option-1\"\r\n                                className=\"currency-options\"\r\n                                onChange={(e) => setChosenPrimaryCurrency(e.target.value)}\r\n                            >\r\n                                {currencies.map((currency, _index) => (<option key={_index}>{currency}</option>))}\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>Secondary Currency:</td>\r\n                        <td>\r\n                            <input\r\n                                name=\"currency-amount-2\"\r\n                                value={result}\r\n                                disabled={true}\r\n                            />\r\n                        </td>\r\n                        <td>\r\n                            <select\r\n                                value={chosenSecondaryCurrency}\r\n                                name=\"currency-option-2\"\r\n                                className=\"currency-options\"\r\n                                onChange={(e) => setChosenSecondaryCurrency(e.target.value)}\r\n                            >\r\n                                {currencies.map((currency, _index) => (<option key={_index}>{currency}</option>))}\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>\r\n\r\n                <button id=\"convert-button\" onClick={convert}>Convert</button>\r\n\r\n\r\n            </div>\r\n\r\n\r\n            <ExchangeRate\r\n                exchangedData={exchangedData}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CurrencyConverter\r\n"]},"metadata":{},"sourceType":"module"}